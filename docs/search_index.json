[["output.html", "Chapter 8 Loading and visualising output", " Chapter 8 Loading and visualising output Running an ilike inference algorithm writes algorithm output to a directory specified by the user. The output directory contains a number of files containing output from the inference algorithm. ilike contains functions that allow the user to easily load the algorithm output into R data frames, ready for analysis. The packages ggsmc (Everitt 2024) and ilike.output are designed to process output in this format, respectively used for plotting and calculating statistics. MCMC output can also easily be plotted using ggmcmc (Fernández-i-Marín 2016). The following sections will describe how to load and process output from the different inference algorithms in ilike. Then, at the end of the chapter, in section 8.4 describes how to pivot_wider ilike data (transform it from tidy format to a matrix format), and in section 8.5 we describe the file and directory structure of ilike output (for users who may wish to examine this output directly). References Everitt, Richard G. 2024. Ggsmc: Visualising Output from Sequential Monte Carlo Samplers and Ensemble-Based Methods. https://github.com/richardgeveritt/ggsmc. Fernández-i-Marín, Xavier. 2016. “ggmcmc: Analysis of MCMC Samples and Bayesian Inference.” Journal of Statistical Software 70 (9): 1–20. https://doi.org/10.18637/jss.v070.i09. "],["mcmc-output.html", "8.1 MCMC output", " 8.1 MCMC output To illustrate how to load and process MCMC output, we return to the example in section 1.1. The following code compiles the model (which has a two-dimensional parameter \\(\\theta = (\\theta_1,\\theta_2)\\)) and runs an MCMC algorithm, storing the output in a new folder named toy_model_rwm in the current working directory. library(ilike) model = compile(&quot;toy_model_rwm.ilike&quot;) mcmc(model, results_name = &quot;toy_model_rwm&quot;, initial_values = list(list(θ=c(0,0))), model_parameter_list = list(300.0*diag(2))) 8.1.1 Loading MCMC output (ilike format) To load MCMC output into an R data frame, the function load_mcmc_output is used. The first, and only required, argument is the name of the directory in which the ilike output is stored (toy_model_rwm in this case). The two other arguments are optional: ggmcmc and ilike.output both take values TRUE or FALSE, and determine whether the data frame is suitable for use in, respectively, the ggmcmc or ilike.output packages (the default is ggmcmc = FALSE and ilike.output = TRUE). We begin by loading the output from the MCMC algorithm using the load_mcmc_output function. toy_model_rwm_ilike = load_mcmc_output(&quot;toy_model_rwm&quot;) Here ilike.output is set (by default) to TRUE, so this data frame is in the standard form for ilike output (for use in ggsmc and ilike.output). head(toy_model_rwm_ilike,n=16L) ## ExternalIndex Time Iteration Chain ParameterName Dimension Value ## 1 1 0.5935487 1 1 θ 1 0.00000 ## 2 1 0.5935487 1 1 θ 2 0.00000 ## 3 1 0.5935487 2 1 θ 1 0.00000 ## 4 1 0.5935487 2 1 θ 2 0.00000 ## 5 1 0.5935487 3 1 θ 1 0.00000 ## 6 1 0.5935487 3 1 θ 2 0.00000 ## 7 1 0.5935487 4 1 θ 1 0.00000 ## 8 1 0.5935487 4 1 θ 2 0.00000 ## 9 1 0.5935487 5 1 θ 1 0.00000 ## 10 1 0.5935487 5 1 θ 2 0.00000 ## 11 1 0.5935487 6 1 θ 1 0.00000 ## 12 1 0.5935487 6 1 θ 2 0.00000 ## 13 1 0.5935487 7 1 θ 1 -11.07381 ## 14 1 0.5935487 7 1 θ 2 10.97233 ## 15 1 0.5935487 8 1 θ 1 -11.07381 ## 16 1 0.5935487 8 1 θ 2 10.97233 The data frame contains the following columns: ExternalIndex is only used when the output is from a nested algorithm such as particle MCMC, so can be ignored for now; Time gives the time taken by the MCMC algorithm; Iteration is the iteration of the MCMC algorithm, starting from 1; Chain is the index for the MCMC chain (useful when running multiple chains); ParameterName is the name of the parameter; Dimension is the dimension of the parameter (here 1 for \\(\\theta_1\\) and 2 for \\(\\theta_2\\)); Value is the value of the given dimension of the parameter at the given iteration. This data frame uses the tidy format that is popular in R since it is easy to summarise and plot. It is more standard for Monte Carlo output to be in a matrix format, where each row corresponds to a single iteration and each column corresponds to a parameter. To convert ilike data to this format, see the function ilike_pivot_wider in section 8.4. 8.1.2 Plotting using ggsmc We may use the ggsmc package to plot data in this format. The plot_histogram, plot_density, plot_scatter and plot_time_series functions are all compatible with plotting MCMC output from ilike, as long as the argument mcmc=TRUE is set (if this is not set, you will likely receive an error, since ggsmc by default expects output from an SMC or ensemble algorithm). Here are examples of each. plot_histogram can be used for plotting histograms of marginal posterior distributions of the parameters. library(ggsmc) plot_histogram(toy_model_rwm_ilike, parameter = &quot;θ&quot;, dimension = 1, mcmc = TRUE) plot_density can be used for plotting kernel density estimates of the marginal posterior distributions of the parameters. plot_density(toy_model_rwm_ilike, parameter = &quot;θ&quot;, dimension = 1, mcmc = TRUE) plot_scatter can be used for plotting scatter plots of joint distributions of pairs of parameters. library(ggsmc) plot_scatter(toy_model_rwm_ilike, x_parameter = &quot;θ&quot;, x_dimension = 1, y_parameter = &quot;θ&quot;, y_dimension = 2, mcmc = TRUE) plot_time_series can be used for plotting time series of the parameters. Here it is assumed that the Dimension column in the MCMC output refers to a time index. As an example, we show output from our two-dimensional model using this function, but this figure is meaningless since the Dimension column cannot be interpreted as a time series for the model we are studying. library(ggsmc) plot_time_series(toy_model_rwm_ilike, parameter = &quot;θ&quot;, mcmc = TRUE, alpha = 0.01) 8.1.3 Loading MCMC output (ggmcmc format) We now show how to load the MCMC output in a format suitable for use with the ggmcmc package. This is done by setting the ggmcmc argument to TRUE in the load_mcmc_output function. toy_model_rwm_ggmcmc = load_mcmc_output(&quot;toy_model_rwm&quot;, ggmcmc = TRUE) The format expected by ggmcmc is a little different to that expected by ggsmc and ilike.output. head(toy_model_rwm_ggmcmc,n=16L) ## ExternalIndex Time Iteration Chain value Parameter ## 1 1 0.5935487 1 1 0.00000 θ_1 ## 2 1 0.5935487 1 1 0.00000 θ_2 ## 3 1 0.5935487 2 1 0.00000 θ_1 ## 4 1 0.5935487 2 1 0.00000 θ_2 ## 5 1 0.5935487 3 1 0.00000 θ_1 ## 6 1 0.5935487 3 1 0.00000 θ_2 ## 7 1 0.5935487 4 1 0.00000 θ_1 ## 8 1 0.5935487 4 1 0.00000 θ_2 ## 9 1 0.5935487 5 1 0.00000 θ_1 ## 10 1 0.5935487 5 1 0.00000 θ_2 ## 11 1 0.5935487 6 1 0.00000 θ_1 ## 12 1 0.5935487 6 1 0.00000 θ_2 ## 13 1 0.5935487 7 1 -11.07381 θ_1 ## 14 1 0.5935487 7 1 10.97233 θ_2 ## 15 1 0.5935487 8 1 -11.07381 θ_1 ## 16 1 0.5935487 8 1 10.97233 θ_2 The data frame contains the following columns: ExternalIndex is only used when the output is from a nested algorithm such as particle MCMC, so can be ignored for now; Time gives the time taken by the MCMC algorithm; Iteration is the iteration of the MCMC algorithm, starting from 1; Chain is the index for the MCMC chain (useful when running multiple chains); value is the value of the given dimension of the parameter at the given iteration; Parameter is the name of the parameter, which combines the variable name assigned in the model, and the dimension. In this output we see that the parameter names are θ_1 and θ_2. 8.1.4 Plotting using ggmcmc This data frame is in the format expected by ggmcmc, so we can use the ggmcmc package to plot histograms, densities, trace plots, running means, autocorrelation plots and other diagnostics. Here we show only how to plot trace plots using ggmcmc. library(ggmcmc) ggs_traceplot(toy_model_rwm_ggmcmc) 8.1.5 Burn-in / warm-up In MCMC algorithms, it is common to discard the first few iterations of the chain as a burn-in or warm-up period. This is because the chain may not have converged to the stationary distribution in the early iterations. ilike does not automatically discard any iterations as burn-in, so it is up to the user to decide how many iterations to discard (maybe after studying trace plots, such as that above, or using other diagnostics). This can be done by subsetting the data frame. For example, to discard the first 100 iterations of the MCMC output, we can use the following code, using the dplyr package. library(dplyr) toy_model_rwm_ggmcmc_burned_in &lt;- toy_model_rwm_ggmcmc %&gt;% filter(Iteration &gt; 100) "],["smc-output.html", "8.2 IS and SMC output", " 8.2 IS and SMC output For loading the output of IS and SMC algorithms we use the function load_smc_output. We use the particle filter output from section €ref(filtering_cv) as example output for this section. To load the output from this algorithm we call sir_cwna_model = load_smc_output(&quot;sir_cwna_model&quot;) The format is not dissimilar to that for MCMC algorithms. head(sir_cwna_model) ## ExternalIndex Target Time NormalisingConstant ISESS TargetParameters ## 1 1 1 0.0025475 -3.07181 16.2299 i=0;dt=1; ## 2 1 1 0.0025475 -3.07181 16.2299 i=0;dt=1; ## 3 1 1 0.0025475 -3.07181 16.2299 i=0;dt=1; ## 4 1 1 0.0025475 -3.07181 16.2299 i=0;dt=1; ## 5 1 1 0.0025475 -3.07181 16.2299 i=0;dt=1; ## 6 1 1 0.0025475 -3.07181 16.2299 i=0;dt=1; ## Iteration Particle AncestorIndex LogWeight ParameterName Dimension Value ## 1 1 1 1 -28.057199 x 1 6.5297 ## 2 1 1 1 -28.057199 x 2 -15.4264 ## 3 1 2 2 -2.453099 x 1 -0.5869 ## 4 1 2 2 -2.453099 x 2 -8.7790 ## 5 1 3 3 -11.568199 x 1 3.6434 ## 6 1 3 3 -11.568199 x 2 -14.1641 ExternalIndex is only used when the output is from a nested algorithm such as particle MCMC, so can be ignored for now; Target is the index of the target distribution in the SMC algorithm. This will be equal to 1 when an IS algorithm is used; Time gives the time taken by the SMC algorithm up to the given target distribution; NormalisingConstant is the estimated normalising constant of the given target distribution; ISESS is the estimated effective sample size of the particles at the given target distribution; TargetParameters is a string giving the parameters of the target distribution; Iteration is the iteration of the of an MCMC algorithm used within the SMC algorithm. When no MCMC iterations are used, this will be equal to 1; Particle is the index of the particle; AncestorIndex is the index of the ancestor of the particle. This is used to trace the ancestry of the particles, which is useful for analysing the effect of resampling; LogWeight is the log weight of the particle; ParameterName is the name of the parameter; Dimension is the dimension of the parameter; Value is the value of the given dimension of the parameter at the given MCMC iteration for the given SMC target. 8.2.1 Visualising output using ggsmc This output can be visualised using the ggsmc package, which contains functions for plotting and animating histograms, densities, scatter plots and the genealogy of the particle population. Examples of these plots for this model can be found in the vigentte for the ggsmc package. Here we include ony an example of the evolution of the particle population over time. data(cwna_data) plot_genealogy(sir_cwna_model, parameter = &quot;x&quot;, dimension = 1, use_initial_points = FALSE, vertical = FALSE, alpha_lines = 0, alpha_points = 0.05, arrows = FALSE, default_title = TRUE) + ggplot2::geom_line(data=cwna_data,ggplot2::aes(x=Index,y=Position),colour=&quot;red&quot;,inherit.aes = FALSE) + ggplot2::theme_minimal() + ggplot2::theme(legend.position=&quot;none&quot;) "],["ensemble-kalman-output.html", "8.3 Ensemble Kalman output", " 8.3 Ensemble Kalman output Loading and plotting output from ensemble methods is very similar to that for SMC methods. We use the ensemble Kalman filter output from section €ref(filtering_cv) as example output for this section. To load the output from this algorithm we call enk_cwna_model = load_enk_output(&quot;enk_cwna_model&quot;) The format is the same as that from the function load_smc_output in section €ref(smc-output), except that the following two columns are not present in the output: AncestorIndex, since the set of particles (usually called an ensemble in this context), is not resampled; LogWeight, since each particle (member of the ensemble) has equal weight. "],["pivot-wider.html", "8.4 pivot_wider for ilike data", " 8.4 pivot_wider for ilike data Users who are not familiar with the “tidy” data format, or have their own functions for plotting Monte Carlo output, may prefer to load algorithm output in a matrix format, with one row per simulated point. The function ilike_pivot_wider may be used for this. For example, to load the output of the toy model in a matrix format, we can use the following code. one_row_per_point = ilike_pivot_wider(toy_model_rwm_ilike) The output is a data frame with one row per simulated point, and columns for each parameter and iteration: head(one_row_per_point,n=16L) ## ExternalIndex Time Iteration Chain θ_1 θ_2 ## 1 1 0.5935487 1 1 0.00000 0.00000 ## 2 1 0.5935487 2 1 0.00000 0.00000 ## 3 1 0.5935487 3 1 0.00000 0.00000 ## 4 1 0.5935487 4 1 0.00000 0.00000 ## 5 1 0.5935487 5 1 0.00000 0.00000 ## 6 1 0.5935487 6 1 0.00000 0.00000 ## 7 1 0.5935487 7 1 -11.07381 10.97233 ## 8 1 0.5935487 8 1 -11.07381 10.97233 ## 9 1 0.5935487 9 1 -11.07381 10.97233 ## 10 1 0.5935487 10 1 -11.07381 10.97233 ## 11 1 0.5935487 11 1 -11.07381 10.97233 ## 12 1 0.5935487 12 1 -11.07381 10.97233 ## 13 1 0.5935487 13 1 -11.07381 10.97233 ## 14 1 0.5935487 14 1 -11.07381 10.97233 ## 15 1 0.5935487 15 1 -11.07381 10.97233 ## 16 1 0.5935487 16 1 -11.07381 10.97233 To remove the columns that do not contain the points themselves, use just_the_points &lt;- dplyr::select(one_row_per_point, -c(ExternalIndex, Time, Iteration, Chain)) head(just_the_points) ## θ_1 θ_2 ## 1 0 0 ## 2 0 0 ## 3 0 0 ## 4 0 0 ## 5 0 0 ## 6 0 0 "],["output-detail.html", "8.5 Further detail about output files", " 8.5 Further detail about output files "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
